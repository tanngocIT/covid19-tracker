{"version":3,"sources":["components/info-box/InfoBox.js","components/chart/LineGraph.js","components/table/Table.js","utils/util.js","components/map/Map.js","components/app/App.js","serviceWorker.js","index.js"],"names":["InfoBox","caseType","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","gutterBottom","title","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","countryCode","useState","setData","useEffect","a","fetch","Worldwide","code","then","response","json","timeline","fetchData","length","datasets","backgroundColor","color","rgb","borderColor","half_op","Table","countries","map","country","sortData","sortedData","sort","b","Map","center","zoom","TileLayer","url","attribution","CaseType","New","Circle","countryInfo","lat","long","hex","fillColor","fillOpacity","Math","sqrt","multiplier","Popup","style","backgroundImage","flag","recovered","deaths","showDataOnMap","CasesTypeColors","Recovered","Death","name","App","centerValue","lng","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","mapCenter","setMapCenter","mapZoom","setMapZoom","iso2","getCountriesData","onCountryChange","e","FormControl","Autocomplete","id","classes","getOptionLabel","option","onChange","renderInput","params","TextField","variant","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d79cef70.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ caseType, cases, total, active, isRed, ...props }) {\n  if (!caseType) return null;\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        active && isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography gutterBottom className={\"infoBox--white\"}>\n          {caseType.title}\n        </Typography>\n        <h2 className={`infoBox__total ${!isRed && \"infoBox__total--green\"}`}>\n          {total} Total\n        </h2>\n\n        <Typography className=\"infoBox--white infoBox__cases\">\n          + {cases} Today\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport { Worldwide } from \"../app/App\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  if (!data) return chartData;\n  let lastDataPoint;\n  for (let date in data[casesType.value]) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType.value][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType.value][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, countryCode }) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\n        `https://disease.sh/v3/covid-19/historical/${\n          countryCode === Worldwide.code ? \"all\" : countryCode\n        }?lastdays=120`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(\n            countryCode === Worldwide.code ? data : data.timeline,\n            casesType\n          );\n          setData(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType, countryCode]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: casesType.color.rgb, //\"rgba(204, 16, 52, 0.5)\",\n                borderColor: casesType.color.half_op, //\"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country, index) => (\n        <tr> \n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport { CaseType } from \"../components/app/App\";\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = CaseType.New.value) => \n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesType.color.hex}\n      fillColor={casesType.color.hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType.value]) * casesType.color.multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"../../utils/util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { FormControl, Card, CardContent, TextField } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport InfoBox from \"../info-box/InfoBox\";\nimport LineGraph from \"../chart/LineGraph\";\nimport Table from \"../table/Table\";\nimport { sortData } from \"../../utils/util\";\nimport numeral from \"numeral\";\nimport Map from \"../map//Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nexport const CasesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const CaseType = {\n  New: {\n    title: \"Cases\",\n    value: \"cases\",\n    color: CasesTypeColors.cases,\n  },\n  Recovered: {\n    title: \"Recovered\",\n    value: \"recovered\",\n    color: CasesTypeColors.recovered,\n  },\n  Death: { title: \"Deaths\", value: \"deaths\", color: CasesTypeColors.deaths },\n};\n\nexport const Worldwide = { name: \"Worldwide\", code: \"worldwide\" };\n\nconst App = () => {\n  const centerValue = { lat: 34.80746, lng: -40.4796 };\n  const [country, setInputCountry] = useState(Worldwide);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(CaseType.New);\n  const [mapCenter, setMapCenter] = useState(centerValue);\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e, value) => {\n    const countryCode = value && value.value ? value.value : Worldwide;\n    const url =\n      countryCode === Worldwide\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n        if (countryCode === Worldwide) {\n          setMapCenter(centerValue);\n          setMapZoom(3);\n          setInputCountry(Worldwide);\n        } else if (data.countryInfo) {\n          setInputCountry({ name: data.country, code: countryCode });\n          setMapCenter({\n            lat: data.countryInfo.lat,\n            lng: data.countryInfo.long,\n          });\n          setMapZoom(4);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Autocomplete\n              id=\"sellect__country\"\n              options={countries}\n              classes=\"app__dropdown__item\"\n              getOptionLabel={(option) => option.name}\n              onChange={onCountryChange}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Worldwide\" variant=\"outlined\" />\n              )}\n            />\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(CaseType.New)}\n            caseType={CaseType.New}\n            isRed\n            active={casesType === CaseType.New}\n            //cases={prettyPrintStat(countryInfo.todayCases)}\n            //total={numeral(countryInfo.cases).format(\"0.0a\")}\n            cases={numeral(countryInfo.todayCases).format(\"0,0\")}\n            total={numeral(countryInfo.cases).format(\"0,0\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(CaseType.Recovered)}\n            caseType={CaseType.Recovered}\n            active={casesType === CaseType.Recovered}\n            // cases={prettyPrintStat(countryInfo.todayRecovered)}\n            // total={numeral(countryInfo.recovered).format(\"0.0a\")}\n            cases={numeral(countryInfo.todayRecovered).format(\"0,0\")}\n            total={numeral(countryInfo.recovered).format(\"0,0\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(CaseType.Death)}\n            caseType={CaseType.Death}\n            isRed\n            active={casesType === CaseType.Death}\n            // cases={prettyPrintStat(countryInfo.todayDeaths)}\n            // total={numeral(countryInfo.deaths).format(\"0.0a\")}\n            cases={numeral(countryInfo.todayDeaths).format(\"0,0\")}\n            total={numeral(countryInfo.deaths).format(\"0,0\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>\n              {country.name} new {casesType.value}\n            </h3>\n            <LineGraph casesType={casesType} countryCode={country.code} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}